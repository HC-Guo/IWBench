# Author: Yaonan Gu, yaonangu@u.nus.edu
# Date: 2023.12.13

"""
GPT4WebsiteGenerator Class

Purpose:
- This class is designed to interact with the OpenAI GPT-4 API for the purpose of generating HTML code for websites.
- It allows users to input a prompt that describes the kind of website they want to generate.
- The class includes functionality to review and improve the prompt for better results from the GPT-4 API.
- It then calls the GPT-4 API with the improved prompt and processes the response to generate HTML code.
- The generated HTML code is saved to a specified file, making it easy to create a wide range of web pages based on user input.

Usage:
- The user is prompted to enter a description of the website they want to create.
- The script reviews the prompt, makes necessary improvements, and then generates HTML code based on the prompt.
- The HTML code for the described website is saved to a file, which can be used as the foundation for a web page.

Requirements:
- An active OpenAI API key with access to the GPT-4 model is required.
- Internet connection is necessary for API requests.
- Proper permissions should be ensured for writing the output file in the desired directory.

Example:
- A user can input a prompt like "Create a dynamic website page for a travel blog."
- The script processes this prompt, interacts with the GPT-4 API, and creates an HTML file containing the code for this website.
"""

import requests

class GPT4WebsiteGenerator:
    def __init__(self, api_key, api_url):
        self.api_key = api_key
        self.api_url = api_url

    def call_gpt4_api(self, prompt):
        """
        Calls the GPT-4 API with the given prompt and returns the generated text.
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        data = {
            "prompt": prompt,
            "max_tokens": 200  # 根据需要调整
        }

        response = requests.post(self.api_url, json=data, headers=headers)
        response.raise_for_status()
        return response.json()["choices"][0]["text"]

    def review_and_improve_prompt(self, prompt):
        """ 
        Reviews and improves the given prompt for generating a website. 
        """
        # 逻辑改进的示例
        if "HTML" not in prompt:
            # 确保返回HTML代码
            improved_prompt = prompt + "\n\nGenerate the HTML code for this website."
        elif "dynamic" not in prompt.lower():
            # 确保 prompt 描述了动态内容
            improved_prompt = prompt + " The website should have dynamic content based on user interactions."
        return improved_prompt

    def create_website_html(self, prompt, filename="website.html"):
        """ 
        Creates website HTML code based on the improved prompt and saves it to a file. 
        """
        improved_prompt = self.review_and_improve_prompt(prompt)
        html_code = self.call_gpt4_api(improved_prompt)
        with open(filename, "w") as file:
            file.write(html_code)
        print(f"HTML code saved to {filename}")

# 使用示例
api_key = "your-api-key-here"  # 替换为自己的 GPT-4 API 密钥
api_url = "https://api.openai.com/v4/engines/gpt-4/completions"  # 替换为自己的 GPT-4 API URL
generator = GPT4WebsiteGenerator(api_key, api_url)

user_prompt = input("Enter your prompt for the website: ")  # 获取用户键入的prompt，可根据prompt存储格式进行读取方式的改进
generator.create_website_html(user_prompt, "travel_blog.html")
